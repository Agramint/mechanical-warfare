apply plugin: "java"

version '1.0'

sourceCompatibility = 1.8

sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "mw.MechanicalWarfare"
project.ext.assetsDir = new File("$projectDir/assets")

repositories{
    mavenCentral()
    maven{ url 'https://www.jitpack.io' }
}

ext{
    //the build number that this mod is made for
    mindustryVersion = 'v107'
    //version of SDK you will be using
    sdkVersion = '30'
    sdkRoot = System.getenv("ANDROID_HOME")

    doExec = { cmd ->
        def proc = cmd.execute(null, new File("$buildDir/libs"))
        proc.waitForProcessOutput(System.out, System.err)
    }
}

//java 8 backwards compatibility flag
allprojects{
    tasks.withType(JavaCompile){
        if(JavaVersion.current() != JavaVersion.VERSION_1_8){
            options.compilerArgs.addAll(['--release', '8'])
        }
    }
}

task jarAndroid(type: Jar){
    dependsOn "jar"

    archiveFileName = "${modName}Android.jar"

    doLast{
        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])
        def dependencies = files.collect{ "--classpath $it.path" }.join(" ")

        //dex and desugar files - this requires d8 in your PATH
        doExec("d8 $dependencies --min-api 14 --output ${modName}Android.jar ${modName}Desktop.jar")
    }
}

task jarDesktop(type: Jar){
    archiveFileName = "${modName}Desktop.jar"

    from files(sourceSets.main.output.classesDirs)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.runtimeClasspath.collect{ it.isDirectory() ? it : zipTree(it) }}
    from files(project.assetsDir)

    from(projectDir){
        include "mod.json"
    }

    manifest{
        attributes 'Main-Class': project.mainClassName
    }
}

task deploy(type: Jar){
    dependsOn jarAndroid
    dependsOn jarDesktop
    archiveFileName = "${modName}.jar"

    from{[
        zipTree("$buildDir/libs/${modName}Desktop.jar"), 
        zipTree("$buildDir/libs/${modName}Android.jar")
    ]}

    doLast{
        delete{ delete "$buildDir/libs/${modName}Desktop.jar" }
        delete{ delete "$buildDir/libs/${modName}Android.jar" }
    }
}
